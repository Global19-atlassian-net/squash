steps:
  
# Can create a dep cache by running 'gcloud builds submit . --config=cloudbuild-cache.yaml'
# These two steps should populate the cache
# - name: gcr.io/cloud-builders/gsutil
#   entrypoint: 'bash'
#   args: ['-c', 'mkdir -p ./gopath/pkg/dep && gsutil cat gs://solo-public-cache/squash/squash-dep.tar.gz | tar -xzf -']
#   id: 'download-untar-dep-cache'
#   waitFor: ['-']

# Run dep to set up the project so it can be built and tested
# Dep modifies workspace so that the code is moved into the PROJECT_ROOT
# All steps after this must set GOPATH
- name: 'gcr.io/$PROJECT_ID/dep'
  args: ['ensure']
  env:
    - 'PROJECT_ROOT=github.com/solo-io/squash'
    - 'GIT_SSH_CONFIG=FALSE'
  id: 'dep'

# Run some basic checks on the repo
# 1) check formatting of go files
# 2) ensure that make generated-code produces a clean diff
# 3) ensure that the site is generated with no warnings (strict = true in mkdocs)

# e2e-ginkgo is produced from https://github.com/solo-io/cloud-builders/e2e-ginkgo
# Must set the GOPATH to tell the container the workspace has already been set up (by the dep step above)
- name: 'gcr.io/$PROJECT_ID/e2e-ginkgo'
  env:
  - 'PROJECT_ROOT=github.com/solo-io/squash'
  - 'GOPATH=/workspace/gopath'
  dir: './gopath/src/github.com/solo-io/squash'
  entrypoint: make
  args: ['check-format']
  waitFor: ['dep']
  id: 'check-format'
- name: 'gcr.io/$PROJECT_ID/go-make'
  entrypoint: 'bash'
  args: ['ci/check-code-and-docs-gen.sh']
  env:
  - 'PROJECT_ROOT=github.com/solo-io/squash'
  - 'GOPATH=/workspace/gopath'
  - 'TAGGED_VERSION=$TAG_NAME'
  dir: './gopath/src/github.com/solo-io/squash'
  waitFor: ['dep']
  id: 'check-code-and-docs-gen'

# - name: 'gcr.io/$PROJECT_ID/e2e-ginkgo'
#   entrypoint: ls
#   waitFor: ['-']
#   waitFor: ['dep']
#   id: 'grab-ginkgo-container'

- name: 'gcr.io/$PROJECT_ID/go-make'
  env:
  - 'PROJECT_ROOT=github.com/solo-io/squash'
  - 'GOPATH=/workspace/gopath'
  - 'TAGGED_VERSION=$TAG_NAME'
  dir: './gopath/src/github.com/solo-io/squash'
  waitFor: ['check-code-and-docs-gen']
  args: ['all']

- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args: ['-c', 'docker login --username soloiobot --password $$DOCKER_HUB_PASSWORD']
  secretEnv: ['DOCKER_HUB_PASSWORD']

# - name: 'gcr.io/cloud-builders/docker'
#   env:
#   # - VERSION=$TAG_NAME
#   entrypoint: make
#   args: ['containers']

# - name: 'gcr.io/$PROJECT_ID/vsce'
#   env:
#   - VERSION=$TAG_NAME
#   entrypoint: make
#   args: ['bump-extension-version']

# - name: node:10.10.0
#   entrypoint: npm
#   args: ['install']
#   dir: ./extension/vscode

# - name: 'gcr.io/$PROJECT_ID/vsce'
#   args: ['package']
#   dir: ./extension/vscode

# # publish
# - name: 'gcr.io/cloud-builders/docker'
#   env:
#   - VERSION=$TAG_NAME
#   entrypoint: make
#   args: ['push-containers']

# - name: 'gcr.io/$PROJECT_ID/go-make'
#   env:
#   - VERSION=$TAG_NAME
#   entrypoint: make
#   args: ['upload-release']
#   secretEnv: ['GITHUB_TOKEN']

  # TODO(mitchdraft) enable vscode publish
#- name: 'gcr.io/$PROJECT_ID/vsce'
#  entrypoint: ./hack/publish-extension.sh
#  secretEnv: ['VSCODE_TOKEN']

secrets:
- kmsKeyName: projects/solo-public/locations/global/keyRings/build/cryptoKeys/build-key
  secretEnv:
    # GITHUB_TOKEN: CiQAwdWthppXCatGZZrcHgwEcPXq0J1UVsTgGxHBVeS08sMZV/gSUgD5SXFIMJqfBsZflgeqMpC4hkszp8q8aeBh6oMuPRJRHKZRCIlJhHiaamm49VmFHROd9rG7b8y0MTVb5BOaQPN9MQ1j9tIXI8XoHlI9JHfpgLs=
    DOCKER_HUB_PASSWORD: CiQABlzmSW0u+qhXDvTCxLnbi09Zm88eCU0wSdvFn1W+6WOpTgQSTgCCPGSGTAlMndrEkYOynPhDzTXrW1q1eAsQYjKOWOwZKodcQZ2WIzdvpOOjv+WrGTssWWg1uPFV4CnajT7DzeNAb7USkla1epatm6OnuQ==
    ## uncomment when extension is ready
    # VSCODE_TOKEN: CiQABlzmSepRzBG6r2UapqKVaJfx5X3PQgWpuKtIinDWI4IpZsASXQCCPGSGtYjgB1ARs6VcRy3J23Mlbo7zeqPamti48qk71axnOBu4pSomCTKj+4iB81E/dgJEmo9aXOIfPoSv7jEs1ijN7J326jA+AOS1M4eUQwfAWovUtmjecP0p+Q==
