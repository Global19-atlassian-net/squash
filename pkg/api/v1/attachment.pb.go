// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: attachment.proto

package v1 // import "github.com/solo-io/squash/pkg/api/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

//
// @solo-kit:resource.short_name=att
// @solo-kit:resource.plural_name=attachments
// @solo-kit:resource.resource_groups=api.squash.solo.io
//
// Attachments store the information needed for squash to coordinate a debugging session
type Attachment struct {
	Debugger             string        `protobuf:"bytes,1,opt,name=debugger,proto3" json:"debugger,omitempty"`
	Image                string        `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	ProcessName          string        `protobuf:"bytes,3,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	Node                 string        `protobuf:"bytes,4,opt,name=node,proto3" json:"node,omitempty"`
	MatchRequest         bool          `protobuf:"varint,5,opt,name=match_request,json=matchRequest,proto3" json:"match_request,omitempty"`
	Metadata             core.Metadata `protobuf:"bytes,6,opt,name=metadata" json:"metadata"`
	Status               core.Status   `protobuf:"bytes,7,opt,name=status" json:"status" testdiff:"ignore"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Attachment) Reset()         { *m = Attachment{} }
func (m *Attachment) String() string { return proto.CompactTextString(m) }
func (*Attachment) ProtoMessage()    {}
func (*Attachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_attachment_896c96dfb07a3a5b, []int{0}
}
func (m *Attachment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Attachment.Unmarshal(m, b)
}
func (m *Attachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Attachment.Marshal(b, m, deterministic)
}
func (dst *Attachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attachment.Merge(dst, src)
}
func (m *Attachment) XXX_Size() int {
	return xxx_messageInfo_Attachment.Size(m)
}
func (m *Attachment) XXX_DiscardUnknown() {
	xxx_messageInfo_Attachment.DiscardUnknown(m)
}

var xxx_messageInfo_Attachment proto.InternalMessageInfo

func (m *Attachment) GetDebugger() string {
	if m != nil {
		return m.Debugger
	}
	return ""
}

func (m *Attachment) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *Attachment) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *Attachment) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *Attachment) GetMatchRequest() bool {
	if m != nil {
		return m.MatchRequest
	}
	return false
}

func (m *Attachment) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *Attachment) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func init() {
	proto.RegisterType((*Attachment)(nil), "squash.solo.io.Attachment")
}
func (this *Attachment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Attachment)
	if !ok {
		that2, ok := that.(Attachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Debugger != that1.Debugger {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if this.ProcessName != that1.ProcessName {
		return false
	}
	if this.Node != that1.Node {
		return false
	}
	if this.MatchRequest != that1.MatchRequest {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func init() { proto.RegisterFile("attachment.proto", fileDescriptor_attachment_896c96dfb07a3a5b) }

var fileDescriptor_attachment_896c96dfb07a3a5b = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0x6f, 0x7a, 0xdb, 0xde, 0x5e, 0xb7, 0xf7, 0x0a, 0xac, 0x0a, 0x99, 0x0e, 0xb4, 0x14,
	0x86, 0x0a, 0x41, 0xac, 0xc2, 0x82, 0xd8, 0xe8, 0xc2, 0x04, 0x43, 0xd8, 0x58, 0x2a, 0x37, 0x39,
	0x75, 0xac, 0xe2, 0x38, 0xb5, 0x4f, 0x78, 0x1b, 0x76, 0x1e, 0x85, 0xa7, 0xe8, 0xc0, 0x23, 0xf0,
	0x04, 0xa8, 0x4e, 0x5a, 0x09, 0x89, 0xa1, 0x53, 0xce, 0x39, 0xff, 0xff, 0x0d, 0xf9, 0x4c, 0xf6,
	0x04, 0xa2, 0x88, 0x53, 0x0d, 0x19, 0x86, 0xb9, 0x35, 0x68, 0xe8, 0x7f, 0xb7, 0x2c, 0x84, 0x4b,
	0x43, 0x67, 0x9e, 0x4d, 0xa8, 0x4c, 0xaf, 0x2b, 0x8d, 0x34, 0x3e, 0xe2, 0xeb, 0xa9, 0x6c, 0xf5,
	0xc6, 0x52, 0x61, 0x5a, 0xcc, 0xc2, 0xd8, 0x68, 0xbe, 0x6e, 0x5e, 0x28, 0x53, 0x7e, 0x17, 0x0a,
	0xb9, 0xc8, 0x15, 0x7f, 0x19, 0x73, 0x0d, 0x28, 0x12, 0x81, 0xa2, 0x42, 0xf8, 0x0e, 0x88, 0x43,
	0x81, 0x85, 0xab, 0x80, 0xf3, 0x1d, 0x00, 0x0b, 0xf3, 0xb2, 0x3d, 0x7c, 0xad, 0x11, 0x72, 0xbb,
	0xfd, 0x19, 0xda, 0x23, 0xad, 0x04, 0x66, 0x85, 0x94, 0x60, 0x59, 0x30, 0x08, 0x46, 0x7f, 0xa3,
	0xed, 0x4e, 0xbb, 0xa4, 0xa1, 0xb4, 0x90, 0xc0, 0x6a, 0x3e, 0x28, 0x17, 0x7a, 0x4c, 0x3a, 0xb9,
	0x35, 0x31, 0x38, 0x37, 0xcd, 0x84, 0x06, 0xf6, 0xdb, 0x87, 0xed, 0xea, 0xf6, 0x20, 0x34, 0x50,
	0x4a, 0xea, 0x99, 0x49, 0x80, 0xd5, 0x7d, 0xe4, 0x67, 0x7a, 0x42, 0xfe, 0x69, 0x81, 0x71, 0x3a,
	0xb5, 0xb0, 0x2c, 0xc0, 0x21, 0x6b, 0x0c, 0x82, 0x51, 0x2b, 0xea, 0xf8, 0x63, 0x54, 0xde, 0xe8,
	0x35, 0x69, 0x6d, 0x6c, 0xb0, 0xe6, 0x20, 0x18, 0xb5, 0x2f, 0x0f, 0xc2, 0xd8, 0x58, 0xd8, 0x58,
	0x0e, 0xef, 0xab, 0x74, 0x52, 0x7f, 0x5f, 0xf5, 0x7f, 0x45, 0xdb, 0x36, 0xbd, 0x23, 0xcd, 0x52,
	0x0a, 0xfb, 0xe3, 0xb9, 0xee, 0x77, 0xee, 0xd1, 0x67, 0x93, 0xc3, 0x35, 0xf5, 0xb9, 0xea, 0xef,
	0x23, 0x38, 0x4c, 0xd4, 0x7c, 0x7e, 0x33, 0x54, 0x32, 0x33, 0x16, 0x86, 0x51, 0x85, 0x4f, 0xce,
	0xde, 0x3e, 0x8e, 0x82, 0xa7, 0xd3, 0x9f, 0x9c, 0xfa, 0x07, 0xe7, 0xf9, 0x42, 0x56, 0x56, 0x67,
	0x4d, 0xaf, 0xf4, 0xea, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x50, 0xbd, 0x33, 0x83, 0x1e, 0x02, 0x00,
	0x00,
}
