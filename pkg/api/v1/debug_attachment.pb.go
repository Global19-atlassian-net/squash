// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: debug_attachment.proto

package v1 // import "github.com/solo-io/squash/pkg/api/v1"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import core "github.com/solo-io/solo-kit/pkg/api/v1/resources/core"

import bytes "bytes"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type DebugAttachment_State int32

const (
	// Newly created DebugAttachments have state PendingAttachment
	DebugAttachment_PendingAttachment DebugAttachment_State = 0
	// When squash client successfully attaches, it sets state to Attached
	DebugAttachment_Attached DebugAttachment_State = 1
	// User may trigger delete on any DebugAttachments that are in state PendingAttachment or Attached
	// Squash client will remove the DebugAttachment when it has state PendingDelete
	DebugAttachment_PendingDelete DebugAttachment_State = 2
)

var DebugAttachment_State_name = map[int32]string{
	0: "PendingAttachment",
	1: "Attached",
	2: "PendingDelete",
}
var DebugAttachment_State_value = map[string]int32{
	"PendingAttachment": 0,
	"Attached":          1,
	"PendingDelete":     2,
}

func (x DebugAttachment_State) String() string {
	return proto.EnumName(DebugAttachment_State_name, int32(x))
}
func (DebugAttachment_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_debug_attachment_c4b4c9f1f6ac75b0, []int{0, 0}
}

//
// @solo-kit:resource.short_name=debatt
// @solo-kit:resource.plural_name=debugattachments
// @solo-kit:resource.resource_groups=api.squash.solo.io
//
// Attachments store the information needed for squash to coordinate a debugging session
type DebugAttachment struct {
	Metadata             core.Metadata         `protobuf:"bytes,1,opt,name=metadata" json:"metadata"`
	Status               core.Status           `protobuf:"bytes,2,opt,name=status" json:"status" testdiff:"ignore"`
	Attachment           string                `protobuf:"bytes,3,opt,name=attachment,proto3" json:"attachment,omitempty"`
	Debugger             string                `protobuf:"bytes,4,opt,name=debugger,proto3" json:"debugger,omitempty"`
	Image                string                `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	ProcessName          string                `protobuf:"bytes,6,opt,name=process_name,json=processName,proto3" json:"process_name,omitempty"`
	Node                 string                `protobuf:"bytes,7,opt,name=node,proto3" json:"node,omitempty"`
	MatchRequest         bool                  `protobuf:"varint,8,opt,name=match_request,json=matchRequest,proto3" json:"match_request,omitempty"`
	DebugServerAddress   string                `protobuf:"bytes,9,opt,name=debug_server_address,json=debugServerAddress,proto3" json:"debug_server_address,omitempty"`
	State                DebugAttachment_State `protobuf:"varint,10,opt,name=state,proto3,enum=squash.solo.io.DebugAttachment_State" json:"state,omitempty"`
	Pod                  string                `protobuf:"bytes,11,opt,name=pod,proto3" json:"pod,omitempty"`
	Container            string                `protobuf:"bytes,12,opt,name=container,proto3" json:"container,omitempty"`
	DebugNamespace       string                `protobuf:"bytes,13,opt,name=debug_namespace,json=debugNamespace,proto3" json:"debug_namespace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DebugAttachment) Reset()         { *m = DebugAttachment{} }
func (m *DebugAttachment) String() string { return proto.CompactTextString(m) }
func (*DebugAttachment) ProtoMessage()    {}
func (*DebugAttachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_attachment_c4b4c9f1f6ac75b0, []int{0}
}
func (m *DebugAttachment) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugAttachment.Unmarshal(m, b)
}
func (m *DebugAttachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugAttachment.Marshal(b, m, deterministic)
}
func (dst *DebugAttachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugAttachment.Merge(dst, src)
}
func (m *DebugAttachment) XXX_Size() int {
	return xxx_messageInfo_DebugAttachment.Size(m)
}
func (m *DebugAttachment) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugAttachment.DiscardUnknown(m)
}

var xxx_messageInfo_DebugAttachment proto.InternalMessageInfo

func (m *DebugAttachment) GetMetadata() core.Metadata {
	if m != nil {
		return m.Metadata
	}
	return core.Metadata{}
}

func (m *DebugAttachment) GetStatus() core.Status {
	if m != nil {
		return m.Status
	}
	return core.Status{}
}

func (m *DebugAttachment) GetAttachment() string {
	if m != nil {
		return m.Attachment
	}
	return ""
}

func (m *DebugAttachment) GetDebugger() string {
	if m != nil {
		return m.Debugger
	}
	return ""
}

func (m *DebugAttachment) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *DebugAttachment) GetProcessName() string {
	if m != nil {
		return m.ProcessName
	}
	return ""
}

func (m *DebugAttachment) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

func (m *DebugAttachment) GetMatchRequest() bool {
	if m != nil {
		return m.MatchRequest
	}
	return false
}

func (m *DebugAttachment) GetDebugServerAddress() string {
	if m != nil {
		return m.DebugServerAddress
	}
	return ""
}

func (m *DebugAttachment) GetState() DebugAttachment_State {
	if m != nil {
		return m.State
	}
	return DebugAttachment_PendingAttachment
}

func (m *DebugAttachment) GetPod() string {
	if m != nil {
		return m.Pod
	}
	return ""
}

func (m *DebugAttachment) GetContainer() string {
	if m != nil {
		return m.Container
	}
	return ""
}

func (m *DebugAttachment) GetDebugNamespace() string {
	if m != nil {
		return m.DebugNamespace
	}
	return ""
}

func init() {
	proto.RegisterType((*DebugAttachment)(nil), "squash.solo.io.DebugAttachment")
	proto.RegisterEnum("squash.solo.io.DebugAttachment_State", DebugAttachment_State_name, DebugAttachment_State_value)
}
func (this *DebugAttachment) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DebugAttachment)
	if !ok {
		that2, ok := that.(DebugAttachment)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Metadata.Equal(&that1.Metadata) {
		return false
	}
	if !this.Status.Equal(&that1.Status) {
		return false
	}
	if this.Attachment != that1.Attachment {
		return false
	}
	if this.Debugger != that1.Debugger {
		return false
	}
	if this.Image != that1.Image {
		return false
	}
	if this.ProcessName != that1.ProcessName {
		return false
	}
	if this.Node != that1.Node {
		return false
	}
	if this.MatchRequest != that1.MatchRequest {
		return false
	}
	if this.DebugServerAddress != that1.DebugServerAddress {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if this.Pod != that1.Pod {
		return false
	}
	if this.Container != that1.Container {
		return false
	}
	if this.DebugNamespace != that1.DebugNamespace {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

func init() {
	proto.RegisterFile("debug_attachment.proto", fileDescriptor_debug_attachment_c4b4c9f1f6ac75b0)
}

var fileDescriptor_debug_attachment_c4b4c9f1f6ac75b0 = []byte{
	// 486 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0xdb, 0xa4, 0x38, 0x93, 0x9f, 0x26, 0xab, 0x50, 0x2d, 0x11, 0x6a, 0x43, 0x00, 0x11,
	0x21, 0xb0, 0x69, 0xb9, 0x20, 0x38, 0xa0, 0x46, 0x95, 0x38, 0x51, 0x21, 0xf7, 0xc6, 0x25, 0xda,
	0xd8, 0x13, 0x67, 0xd5, 0xda, 0xeb, 0xee, 0xae, 0xfb, 0x4c, 0x3c, 0x0a, 0x12, 0xef, 0xd0, 0x03,
	0x8f, 0xc0, 0x13, 0x20, 0xcf, 0x3a, 0x69, 0x8b, 0x38, 0xf4, 0xe4, 0x99, 0xef, 0x67, 0x3d, 0xdf,
	0xee, 0xc0, 0x7e, 0x82, 0x8b, 0x32, 0x9d, 0x0b, 0x6b, 0x45, 0xbc, 0xca, 0x30, 0xb7, 0x41, 0xa1,
	0x95, 0x55, 0xac, 0x67, 0xae, 0x4a, 0x61, 0x56, 0x81, 0x51, 0x97, 0x2a, 0x90, 0x6a, 0x34, 0x4c,
	0x55, 0xaa, 0x88, 0x0a, 0xab, 0xca, 0xa9, 0x46, 0x47, 0xa9, 0xb4, 0xab, 0x72, 0x11, 0xc4, 0x2a,
	0x0b, 0x2b, 0xe5, 0x5b, 0xa9, 0xdc, 0xf7, 0x42, 0xda, 0x50, 0x14, 0x32, 0xbc, 0x3e, 0x0a, 0x33,
	0xb4, 0x22, 0x11, 0x56, 0xd4, 0x96, 0xf0, 0x01, 0x16, 0x63, 0x85, 0x2d, 0x4d, 0x6d, 0x78, 0xf3,
	0x00, 0x83, 0xc6, 0xa5, 0x53, 0x4f, 0x7e, 0x35, 0x60, 0xef, 0xb4, 0x8a, 0x74, 0xb2, 0x49, 0xc4,
	0x3e, 0x80, 0xbf, 0x1e, 0x82, 0x7b, 0x63, 0x6f, 0xda, 0x3e, 0xde, 0x0f, 0x62, 0xa5, 0x71, 0x1d,
	0x2e, 0xf8, 0x5a, 0xb3, 0xb3, 0xc6, 0xcf, 0x9b, 0xc3, 0xad, 0x68, 0xa3, 0x66, 0x5f, 0x60, 0xd7,
	0xcd, 0xc2, 0xb7, 0xc9, 0x37, 0xbc, 0xef, 0x3b, 0x27, 0x6e, 0xf6, 0xa4, 0x72, 0xfd, 0xb9, 0x39,
	0x1c, 0x58, 0x34, 0x36, 0x91, 0xcb, 0xe5, 0xc7, 0x89, 0x4c, 0x73, 0xa5, 0x71, 0x12, 0xd5, 0x76,
	0x76, 0x00, 0x70, 0x7b, 0xc5, 0x7c, 0x67, 0xec, 0x4d, 0x5b, 0xd1, 0x1d, 0x84, 0x8d, 0xc0, 0xa7,
	0x87, 0x48, 0x51, 0xf3, 0x06, 0xb1, 0x9b, 0x9e, 0x0d, 0xa1, 0x29, 0x33, 0x91, 0x22, 0x6f, 0x12,
	0xe1, 0x1a, 0xf6, 0x0c, 0x3a, 0x85, 0x56, 0x31, 0x1a, 0x33, 0xcf, 0x45, 0x86, 0x7c, 0x97, 0xc8,
	0x76, 0x8d, 0x9d, 0x89, 0x0c, 0x19, 0x83, 0x46, 0xae, 0x12, 0xe4, 0x8f, 0x88, 0xa2, 0x9a, 0x3d,
	0x87, 0x6e, 0x26, 0x6c, 0xbc, 0x9a, 0x6b, 0xbc, 0x2a, 0xd1, 0x58, 0xee, 0x8f, 0xbd, 0xa9, 0x1f,
	0x75, 0x08, 0x8c, 0x1c, 0xc6, 0xde, 0xc1, 0xd0, 0xad, 0x85, 0x41, 0x7d, 0x8d, 0x7a, 0x2e, 0x92,
	0x44, 0xa3, 0x31, 0xbc, 0x45, 0x07, 0x31, 0xe2, 0xce, 0x89, 0x3a, 0x71, 0x0c, 0xfb, 0x04, 0xcd,
	0x2a, 0x29, 0x72, 0x18, 0x7b, 0xd3, 0xde, 0xf1, 0xcb, 0xe0, 0xfe, 0xfa, 0x04, 0xff, 0x3c, 0x09,
	0xdd, 0x1c, 0x46, 0xce, 0xc3, 0xfa, 0xb0, 0x53, 0xa8, 0x84, 0xb7, 0xe9, 0xf4, 0xaa, 0x64, 0x4f,
	0xa1, 0x15, 0xab, 0xdc, 0x0a, 0x99, 0xa3, 0xe6, 0x1d, 0xc2, 0x6f, 0x01, 0xf6, 0x0a, 0xf6, 0xdc,
	0x78, 0x55, 0x70, 0x53, 0x88, 0x18, 0x79, 0x97, 0x34, 0x3d, 0x82, 0xcf, 0xd6, 0xe8, 0xe4, 0x33,
	0x34, 0xe9, 0x47, 0xec, 0x31, 0x0c, 0xbe, 0x61, 0x9e, 0xc8, 0xfc, 0xce, 0x0c, 0xfd, 0x2d, 0xd6,
	0x01, 0xdf, 0xf5, 0x98, 0xf4, 0x3d, 0x36, 0x80, 0x6e, 0x2d, 0x3a, 0xc5, 0x4b, 0xb4, 0xd8, 0xdf,
	0x9e, 0xbd, 0xfe, 0xf1, 0xfb, 0xc0, 0xfb, 0xfe, 0xe2, 0x7f, 0x1b, 0x48, 0xf9, 0xc2, 0xe2, 0x22,
	0xad, 0x77, 0x70, 0xb1, 0x4b, 0x0b, 0xf8, 0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xb6,
	0x99, 0x82, 0x52, 0x03, 0x00, 0x00,
}
