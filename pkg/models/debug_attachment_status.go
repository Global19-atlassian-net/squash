// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DebugAttachmentStatus debug attachment status
// swagger:model DebugAttachmentStatus
type DebugAttachmentStatus struct {

	// debug server address
	DebugServerAddress string `json:"debug_server_address,omitempty"`

	// state
	State string `json:"state,omitempty"`
}

// Validate validates this debug attachment status
func (m *DebugAttachmentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var debugAttachmentStatusTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","attaching","attached","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		debugAttachmentStatusTypeStatePropEnum = append(debugAttachmentStatusTypeStatePropEnum, v)
	}
}

const (
	// DebugAttachmentStatusStateNone captures enum value "none"
	DebugAttachmentStatusStateNone string = "none"
	// DebugAttachmentStatusStateAttaching captures enum value "attaching"
	DebugAttachmentStatusStateAttaching string = "attaching"
	// DebugAttachmentStatusStateAttached captures enum value "attached"
	DebugAttachmentStatusStateAttached string = "attached"
	// DebugAttachmentStatusStateError captures enum value "error"
	DebugAttachmentStatusStateError string = "error"
)

// prop value enum
func (m *DebugAttachmentStatus) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, debugAttachmentStatusTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DebugAttachmentStatus) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebugAttachmentStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebugAttachmentStatus) UnmarshalBinary(b []byte) error {
	var res DebugAttachmentStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
