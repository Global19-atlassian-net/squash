// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DebugAttachmentSpec debug attachment spec
// swagger:model DebugAttachmentSpec
type DebugAttachmentSpec struct {

	// attachment
	// Required: true
	Attachment Attachment `json:"attachment"`

	// debugger
	Debugger string `json:"debugger,omitempty"`

	// image
	Image string `json:"image,omitempty"`

	// If true, this attachment must match a pending debug request.
	MatchRequest bool `json:"match_request,omitempty"`

	// node
	Node string `json:"node,omitempty"`

	// process name
	ProcessName string `json:"process_name,omitempty"`
}

// Validate validates this debug attachment spec
func (m *DebugAttachmentSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachment(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebugAttachmentSpec) validateAttachment(formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *DebugAttachmentSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebugAttachmentSpec) UnmarshalBinary(b []byte) error {
	var res DebugAttachmentSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
